
G = (N, T, P, S)

N = { S, }
T = { }

Productions:

S -> FUNC_DECL | stmt_list | func_defn

func_decl -> func_decl1 ;
func_decl1 -> func_type id ( opt_arg_list )
func_type -> void | datatype
opt_arg_list -> arg_list | epsilon
arg_list -> arg, arg_list | arg
arg -> type id

func_defn -> func_decl1 begin func_stmt end
func_stmt -> stmt func_stmt | return rt  | epsilon
rt -> ( expr )  | expr

stmt_list -> stmt ; stmt_list | stmt ;

stmt -> id := expr ;  |
        if expr then stmt opt_else | 
        while expr do stmt  |
        begin   opt_stmt_list end   |
        var_decl    |
        func_call
        io

//////////////////////////else

opt_else -> else_stmt | epsilon
else_stmt -> else opt_stmt_list

////////////////////////



/////////////////////////////////////////////////////
expr -> expr1 rel   | ( expr )
rel -> operator expr | epsilon
operator ->     <= | >= | == | > | <

expr1 -> expr2 add_sub
add_sub -> + expr | - expr  

expr2 -> expr3 mul_div
mul_div -> * expr | / expr

expr3 -> ! expr
/////////////////////////////////////////////////////

opt_stmt_list -> stmt_list | epsilon

var_decl -> datatype id_list ;
id_list -> id, id_list | id ;
datatype -> int | bool | char

//////////////////////////////////////////
func_call -> id ( opt_expr_list ) ;
opt_expr_list -> expr_list | epsilon
expr_list -> expr , expr_list | expr

///////////////////////////////////////////
io -> cin >> id | cout << id